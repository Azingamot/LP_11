@page "/production"
@using Utils;
@using Microsoft.EntityFrameworkCore;
@inject NavigationManager nav;
@inject ICookie cookie;
@inject IJSRuntime Js;
@rendermode InteractiveServer

<PageTitle>Оборудование</PageTitle>

<LayoutView Layout="typeof(Views.Header)"></LayoutView>

<div class="main-container">
	<div class="container">
		<h1 style="display: flex; justify-content: center; width: 100%;">Оборудование</h1>
	</div>
	<div class="container">
		<h3 style="text-align: center">Перечень оборудования, производимого компанией</h3>
	</div>
	<div class="production-grid-holder">
		@foreach (Production prod in productions)
		{
			<div class="container">
				<div class="production-grid">
					<table class="production-table">
						<tr>
							<h2>@prod.Name</h2>
						</tr>
						<tr>
							<th>
								<p>Категория</p>
							</th>
							<td>
								@prod.Category.Name
							</td>
						</tr>
						<tr>
							<th>
								<p>Цена</p>
							</th>
							<td>
								@prod.Price Рублей
							</td>
						</tr>
						<tr>
							<th class="property-button">
								<a class="property-link" href="/product/@prod.Id">
									<span>
										Характеристики
									</span>
								</a>
							</th>		
						</tr>
						<tr>
							<th style="width: 100%">
								<InputFile OnChange="OnFileChanged" accept=".jpeg, .jpg, .png"></InputFile>
							</th>
							<td>
								<input @onclick="() => LoadFile(prod)" type="button" value="Загрузить"/>
							</td>
						</tr>
					</table>
					<div class="production-image-holder">
						<div class="production-image">
							@if (!string.IsNullOrEmpty(GetImage(prod)))
							{
								<img src="data: image/jpg; base64, @GetImage(prod)"/>
							}
							else 
							{
								<img src="images/not_uploaded.png" />
							}
						</div>
					</div>
				</div>
			</div>
		}
	</div>
</div>

@code {
	private List<Production> productions = new();
	private IBrowserFile? file;

	protected override async void OnInitialized()
	{
		productions = DataReceiver.ReceiveProduction();
		await InvokeAsync(StateHasChanged);
	}

	private string GetImage(Production production)
	{
		if (production != null)
		{
			ClassContext context = new ClassContext();
			ProductionImage? productionImage = context.ProductionImages.Where(u => u.Production == production).FirstOrDefault();

			if (productionImage != null)
			{
				string image = Convert.ToBase64String(productionImage.Image);
				return image;
			}
		}
		return "";
	}

	private void OnFileChanged(InputFileChangeEventArgs args)
	{
		file = args.File;
	}

	private async void LoadFile(Production production)
	{
		if (production != null && file != null)
		{
			MemoryStream ms = new MemoryStream();
			await file.OpenReadStream().CopyToAsync(ms);
			byte[] imageBytes = ms.ToArray();
			bool res = Database.LoadFile(production, imageBytes);

			if (res)
			{
				await Js.InvokeVoidAsync("alert", "Файл успешно загружен");
				await InvokeAsync(StateHasChanged);
			}
			else 
			{
				await Js.InvokeVoidAsync("alert", "Файл не был загружен");
			}
		}
	}
}

